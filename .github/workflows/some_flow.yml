---
name: Auto comment

on:
  pull_request:
    # branches: [main]
    types: [opened, synchronize]

  # pull_request:
  #  types: [opened, edited, synchronize, reopened]

  # push:
  # pull_request_target:
  #   types: [opened]

jobs:
  recreate-comment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Some step
        id: some_step
        run: |
          # export TEST_OUT=`ls -l | xargs`
          # export TEST_OUT="line 1<br/>line 2<br/>line 3"
          export TEST_OUT=`ls -l`
          echo $TEST_OUT
          echo "test_out=${TEST_OUT//$'\n'/<br />}" >> $GITHUB_OUTPUT

      - name: Recreate comment
        uses: actions/github-script@v6
        env:
          TEST_OUT: ${{ steps.some_step.outputs.test_out }}
        with:
          script: |
            console.log(process.env.TEST_OUT)

            const GITHUB_ACTIONS_BOT = 41898282

            const {data: comments} = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.number
            })

            // Find any comment already made by the bot
            const botComment = comments.find(comment => comment.user.id === GITHUB_ACTIONS_BOT)

            if (botComment) {
              await github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id
              })
            }

            const commentBody = `Test comment (${{ github.sha }}) ðŸš€<br/><pre>${process.env.TEST_OUT}</pre>`
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.number,
              body: commentBody
            })

            // if (botComment) {
            //   await github.rest.issues.updateComment({
            //     owner: context.repo.owner,
            //     repo: context.repo.repo,
            //     comment_id: botComment.id,
            //     body: commentBody
            //   })
            // } else {
            //   await github.rest.issues.createComment({
            //     owner: context.repo.owner,
            //     repo: context.repo.repo,
            //     issue_number: context.payload.number,
            //     body: commentBody
            //   })
            // }


      # OK
      # const comments = await github.rest.issues.listComments({
      #   owner: context.repo.owner,
      #   repo: context.repo.repo,
      #   issue_number: context.issue.number
      # })
      # console.log(comments)


      # - name: Leave a message
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       //  context.issue.number
      #       github.rest.issues.createComment({
      #         issue_number: github.event.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: 'Test comment ðŸš€'
      #       })
